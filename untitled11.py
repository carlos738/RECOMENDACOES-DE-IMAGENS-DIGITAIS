# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jXPYfqsfns7QEERmuLJwPN6u9rsD5QkV
"""

import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

image_names = list(uploaded.keys())

image_paths = image_names

def extract_features(img_name):
  img = image.load_img(img_name, target_size=(224, 224))
  # ... (restante da função extract_features)

# Carregue o modelo VGG16 pré-treinado
model = VGG16(weights='imagenet', include_top=False)

# Extraia recursos de todas as imagens
features_list = [extract_features(img_name) for img_name in image_names]

# Crie uma matriz de recursos
features_matrix = np.array(features_list)

def recommend_images(image_index, top_n=5):
  similarities = similarity_matrix[image_index]
  sorted_indices = np.argsort(similarities)[::-1]
  top_indices = sorted_indices[1:top_n+1]  # Exclua a própria imagem
  recommended_images = [image_paths[i] for i in top_indices]
  return recommended_images

import matplotlib.pyplot as plt

def recommend_images(image_index, top_n=5):
  similarities = similarity_matrix[image_index]
  sorted_indices = np.argsort(similarities)[::-1]
  top_indices = sorted_indices[1:top_n+1]  # Exclua a própria imagem

  # Exiba a imagem de entrada
  plt.figure(figsize=(5, 5))
  plt.imshow(image.load_img(image_paths[image_index]))
  plt.title("Imagem de entrada")
  plt.axis('off')
  plt.show()

  # Exiba as imagens recomendadas
  fig, axes = plt.subplots(1, top_n, figsize=(20, 5))
  for i, ax in enumerate(axes.flat):
    img_path = image_paths[top_indices[i]]
    ax.imshow(image.load_img(img_path))
    ax.set_title(f"Recomendação {i+1}")
    ax.axis('off')
  plt.show()

  recommended_images = [image_paths[i] for i in top_indices]
  return recommended_images

# Defina o índice da imagem de entrada (por exemplo, a primeira imagem)
image_index = 0

# Defina o número de recomendações desejadas (por exemplo, 5)
num_recommendations = 5

from IPython import get_ipython
from IPython.display import display
# %%
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
# %%
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))
# %%
image_names = list(uploaded.keys())
image_paths = image_names
# %%
def extract_features(img_name):
  img = image.load_img(img_name, target_size=(224, 224))
  img_data = image.img_to_array(img)
  img_data = np.expand_dims(img_data, axis=0)
  img_data = preprocess_input(img_data)
  features = model.predict(img_data)
  return features.flatten()
# %%
# Carregue o modelo VGG16 pré-treinado
model = VGG16(weights='imagenet', include_top=False)

# Extraia recursos de todas as imagens
features_list = [extract_features(img_name) for img_name in image_names]

# Crie uma matriz de recursos
features_matrix = np.array(features_list)
# %%
# Calcule a matriz de similaridade (similaridade de cosseno)
similarity_matrix = cosine_similarity(features_matrix)
# %%
import matplotlib.pyplot as plt

def recommend_images(image_index, top_n=5):
  similarities = similarity_matrix[image_index]
  sorted_indices = np.argsort(similarities)[::-1]
  top_indices = sorted_indices[1:top_n+1]  # Exclua a própria imagem

  # Exiba a imagem de entrada
  plt.figure(figsize=(5, 5))
  plt.imshow(image.load_img(image_paths[image_index]))
  plt.title("Imagem de entrada")
  plt.axis('off')
  plt.show()

  # Exiba as imagens recomendadas
  fig, axes = plt.subplots(1, top_n, figsize=(20, 5))
  for i, ax in enumerate(axes.flat):
    img_path = image_paths[top_indices[i]]
    ax.imshow(image.load_img(img_path))
    ax.set_title(f"Recomendação {i+1}")
    ax.axis('off')
  plt.show()

  recommended_images = [image_paths[i] for i in top_indices]
  return recommended_images
# %%
# Defina o índice da imagem de entrada (por exemplo, a primeira imagem)
image_index = 0

# Defina o número de recomendações desejadas (por exemplo, 5)
num_recommendations = 5

# Execute a função recommend_images
recommendations = recommend_images(image_index, top_n=num_recommendations)